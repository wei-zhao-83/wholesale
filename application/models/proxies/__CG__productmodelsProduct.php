<?php

namespace Proxies\__CG__\product\models;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Product extends \product\models\Product implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getBarcode()
    {
        $this->__load();
        return parent::getBarcode();
    }

    public function setBarcode($barcode)
    {
        $this->__load();
        return parent::setBarcode($barcode);
    }

    public function getSKU()
    {
        $this->__load();
        return parent::getSKU();
    }

    public function setSKU($sku)
    {
        $this->__load();
        return parent::setSKU($sku);
    }

    public function getSection()
    {
        $this->__load();
        return parent::getSection();
    }

    public function setSection($section)
    {
        $this->__load();
        return parent::setSection($section);
    }

    public function getActive()
    {
        $this->__load();
        return parent::getActive();
    }

    public function setActive($active)
    {
        $this->__load();
        return parent::setActive($active);
    }

    public function getNoDiscount()
    {
        $this->__load();
        return parent::getNoDiscount();
    }

    public function setNoDiscount($discount)
    {
        $this->__load();
        return parent::setNoDiscount($discount);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getComment()
    {
        $this->__load();
        return parent::getComment();
    }

    public function setComment($comment)
    {
        $this->__load();
        return parent::setComment($comment);
    }

    public function getCost()
    {
        $this->__load();
        return parent::getCost();
    }

    public function setCost($cost)
    {
        $this->__load();
        return parent::setCost($cost);
    }

    public function getSuggestedPrice()
    {
        $this->__load();
        return parent::getSuggestedPrice();
    }

    public function setSuggestedPrice($price)
    {
        $this->__load();
        return parent::setSuggestedPrice($price);
    }

    public function getNoServicePrice()
    {
        $this->__load();
        return parent::getNoServicePrice();
    }

    public function setNoServicePrice($price)
    {
        $this->__load();
        return parent::setNoServicePrice($price);
    }

    public function getFullServicePrice()
    {
        $this->__load();
        return parent::getFullServicePrice();
    }

    public function setFullServicePrice($price)
    {
        $this->__load();
        return parent::setFullServicePrice($price);
    }

    public function getCNC()
    {
        $this->__load();
        return parent::getCNC();
    }

    public function setCNC($price)
    {
        $this->__load();
        return parent::setCNC($price);
    }

    public function getDeletedAt()
    {
        $this->__load();
        return parent::getDeletedAt();
    }

    public function setDeletedAt($deleted_at)
    {
        $this->__load();
        return parent::setDeletedAt($deleted_at);
    }

    public function getTags()
    {
        $this->__load();
        return parent::getTags();
    }

    public function addTag($tag)
    {
        $this->__load();
        return parent::addTag($tag);
    }

    public function removeTag($tag)
    {
        $this->__load();
        return parent::removeTag($tag);
    }

    public function addImage($image)
    {
        $this->__load();
        return parent::addImage($image);
    }

    public function getImages()
    {
        $this->__load();
        return parent::getImages();
    }

    public function removeImage($image)
    {
        $this->__load();
        return parent::removeImage($image);
    }

    public function getCategory()
    {
        $this->__load();
        return parent::getCategory();
    }

    public function setCategory($category)
    {
        $this->__load();
        return parent::setCategory($category);
    }

    public function getProductChange($timestamp)
    {
        $this->__load();
        return parent::getProductChange($timestamp);
    }

    public function addProductChange(\product\models\ProductHistory $history)
    {
        $this->__load();
        return parent::addProductChange($history);
    }

    public function getProductChanges()
    {
        $this->__load();
        return parent::getProductChanges();
    }

    public function addVendor($vendor)
    {
        $this->__load();
        return parent::addVendor($vendor);
    }

    public function getVendors()
    {
        $this->__load();
        return parent::getVendors();
    }

    public function removeVendor($vendor)
    {
        $this->__load();
        return parent::removeVendor($vendor);
    }

    public function getQtyUnit()
    {
        $this->__load();
        return parent::getQtyUnit();
    }

    public function setQtyUnit($qty_unit)
    {
        $this->__load();
        return parent::setQtyUnit($qty_unit);
    }

    public function getTotalQty()
    {
        $this->__load();
        return parent::getTotalQty();
    }

    public function setTotalQty($total_qty)
    {
        $this->__load();
        return parent::setTotalQty($total_qty);
    }

    public function getUnit()
    {
        $this->__load();
        return parent::getUnit();
    }

    public function setUnit($unit)
    {
        $this->__load();
        return parent::setUnit($unit);
    }

    public function getUnitCase()
    {
        $this->__load();
        return parent::getUnitCase();
    }

    public function setUnitCase($unit_case)
    {
        $this->__load();
        return parent::setUnitCase($unit_case);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'barcode', 'sku', 'section', 'active', 'no_discount', 'description', 'comment', 'cost', 'suggested_price', 'no_service_price', 'full_service_price', 'cash_and_carry', 'total_qty', 'qty_unit', 'unit', 'unit_case', 'deleted_at', 'tags', 'images', 'category', 'transaction_items', 'product_changes', 'vendors');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}